// Define the breakpoints
$breakpoints: (
  "xs": 0,
  "sm": 576px,
  "md": 768px,
  "lg": 992px,
  "xl": 1200px,
  "2xl": 1440px,
  "3xl": 1600px,
  "4xl": 1900px,
  "5xl": 2200px,
);

// Media query mixin
@mixin breakpoint($name, $type: "max") {
  @if map-has-key($breakpoints, $name) {
    $width: map-get($breakpoints, $name);
    @if $type == "min" {
      @media (min-width: $width) {
        @content;
      }
    } @else if $type == "max" {
      @media (max-width: $width) {
        @content;
      }
    } @else {
      @warn "Invalid type '#{$type}', use 'min' or 'max'";
    }
  } @else {
    @warn "Invalid breakpoint name '#{$name}'";
  }
}
@mixin responsive-font-size {
  // Default font size for the smallest screens
  font-size: 62.5%;

  // Max Width Queries
  $queries: (
    "xs": (
      0,
      62.5%,
      // Font size for low DPR on xs
      60%,
      // Font size for high DPR on xs
    ),
    "sm": (
      576px,
      62.5%,
      // Font size for low DPR on sm
      58%,
      // Font size for high DPR on sm
    ),
    "md": (
      768px,
      62.5%,
      // Font size for low DPR on md
      56%,
      // Font size for high DPR on md
    ),
    "lg": (
      992px,
      62.5%,
      // Font size for low DPR on lg
      54%,
      // Font size for high DPR on lg
    ),
    "xl": (
      1200px,
      62.5%,
      // Font size for low DPR on xl
      52%,
      // Font size for high DPR on xl
    ),
    "2xl": (
      1440px,
      62.5%,
      // Font size for low DPR on 2xl
      50%,
      // Font size for high DPR on 2xl
    ),
    "3xl": (
      1600px,
      62.5%,
      // Font size for low DPR on 3xl
      50%,
      // Font size for high DPR on 3xl
    ),
    "4xl": (
      1900px,
      62.5%,
      // Font size for low DPR on 4xl
      46%,
      // Font size for high DPR on 4xl
    ),
    "5xl": (
      2200px,
      62.5%,
      // Font size for low DPR on 5xl
      44%,
      // Font size for high DPR on 5xl
    ),
  );

  @each $name, $values in $queries {
    $width: nth($values, 1);
    $font-size-low-dpr: nth($values, 2);
    $font-size-high-dpr: nth($values, 3);

    $prev-width: 0;
    // Assuming the list is ordered from smallest to largest
    @if $name != "xs" {
      // Get the previous width to create a min-width
      $prev-name: nth(
        nth(map-keys($queries), index(map-keys($queries), $name) - 1),
        1
      );
      $prev-width: nth(map-get($queries, $prev-name), 1);
    } @else {
      $prev-width: 0;
    }

    // For devices with DPR below 2
    @media (min-width: $prev-width) and (max-width: $width) and (-webkit-min-device-pixel-ratio: 2),
      (min-width: $prev-width) and (max-width: $width) and (max-resolution: 191dpi) {
      font-size: $font-size-low-dpr;
    }

    // For devices with DPR of 2 and above
    @media (min-width: $prev-width) and (max-width: $width) and (-webkit-min-device-pixel-ratio: 2),
      (min-width: $prev-width) and (max-width: $width) and (min-resolution: 192dpi) {
      font-size: $font-size-high-dpr;
    }
  }
}

@mixin responsivePadding(
  $padding-top: null,
  $padding-bottom: null,
  $padding-horizontal: null
) {
  // Set default horizontal padding if not provided
  $default-horizontal: if($padding-horizontal, $padding-horizontal, 15%);

  // Apply horizontal padding
  padding-left: $default-horizontal;
  padding-right: $default-horizontal;

  // Apply vertical padding if provided
  @if $padding-top {
    padding-top: $padding-top;
  }
  @if $padding-bottom {
    padding-bottom: $padding-bottom;
  }

  width: 100%;

  // Adjust horizontal paddings at breakpoints
  @include breakpoint("5xl") {
    padding-left: if($padding-horizontal, $padding-horizontal, 10%);
    padding-right: if($padding-horizontal, $padding-horizontal, 10%);
  }
  @include breakpoint("4xl") {
    padding-left: if($padding-horizontal, $padding-horizontal, 5%);
    padding-right: if($padding-horizontal, $padding-horizontal, 5%);
  }
  @include breakpoint("lg") {
    padding-left: if($padding-horizontal, $padding-horizontal, 3rem);
    padding-right: if($padding-horizontal, $padding-horizontal, 3rem);
  }
  @include breakpoint("md") {
    padding-left: if($padding-horizontal, $padding-horizontal, 1.5rem);
    padding-right: if($padding-horizontal, $padding-horizontal, 1.5rem);
  }
  @include breakpoint("sm") {
    padding-left: if($padding-horizontal, $padding-horizontal, 1rem);
    padding-right: if($padding-horizontal, $padding-horizontal, 1rem);
  }
}

// SPACING
